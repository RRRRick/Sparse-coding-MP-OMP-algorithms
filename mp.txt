dictionary = [1 0; 1/2 sqrt(3)/2;-1/sqrt(2) -1/sqrt(2)]';  
x = [1 1/2]';  
[M,N] = size(dictionary);  
residual = zeros(M,5*N+1);%残差矩阵，保存每次迭代后的残差  
residual(:,1) = x;%初始化残差为x  
L = size(residual,2);%得到残差矩阵的列  
pos_mm = zeros(1,L);%用来保存每次选择的列序号  
resi_norm = zeros(1,L);%用来保存每次迭代后的残差的2范数  
resi_norm(1) = norm(x);%因为前面已初始化残差为x  
for mm = 1:length(residual)  
    %求出dictionary每列与上次残差的内积  
    scalarproducts = dictionary'*residual(:,mm);  
    %找到内积中最大的列及其内积值  
    [val,pos] = max(abs(scalarproducts));  
    %更新残差  
    residual(:,mm+1) = residual(:,mm) - ...  
        scalarproducts(pos)*dictionary(:,pos);  
    %计算残差的2范数（平方和再开根号）  
    resi_norm(mm+1) = norm(residual(:,mm+1));  
    %保存选择的列序号  
    pos_mm(mm+1) = pos;  
end  
%绘出残差的2范数曲线  
plot(resi_norm);grid; 



function A = bmp(D,X,K)

[n, L] = size(D);

	a = zeros(L,1);
	x = X(:, 1);
	residual = x;
	while 1,    
		proj = D'*residual;
        	[~,pos]=max(abs(proj));
		a(pos)=a(pos)+proj(pos);  
      		residual = residual -proj(pos)*D(:,pos);
      	if length(a(a~=0))== K
          break
      end
end;
A(:,1) = a;
return;